# Default image (https://hub.docker.com/_/microsoft-dotnet-sdk)
# Multiarch image, it has both Linux and Windows versions
image: mcr.microsoft.com/dotnet/sdk:6.0

stages:
  - build
  - test
  - deploy

before_script:
  - dotnet --version

# Build model
# (Uses Linux-based runner, because windows tag is NOT specified.)
build_model:
  stage: build
  script:
    - dotnet build SimVillage.Model

# Build complete solution
# (Uses Windows-based runner, because windows tag IS specified.)
build_view:
  stage: build
  # Use a Windows Server Core based docker image
  # The default mcr.microsoft.com/dotnet/sdk:6.0 would depend on Windows Nano Server, 
  # which is not enough for us, as it does not containt the desktop packs.
  image: mcr.microsoft.com/dotnet/sdk:6.0-windowsservercore-ltsc2019
  tags: [windows]
  script:
    - dotnet build SimVillage.sln

# Test
# (Uses Linux-based runner, because windows tag is NOT specified.)
test_model:
  stage: test
  before_script:    
    # Restore NuGet packages to the local .nuget folder (inside the project directory).
    - dotnet restore SimVillageTest --packages .nuget
  script:
    - dotnet test SimVillageTest --no-restore
  # Cache and keep downloaded NuGet dependencies between CI pipelines
  cache:
    # The CI_COMMIT_REF_SLUG is a slug for the branch or tag name,
    # so there will be a separate cache for each branch.
    key: "unittest-$CI_COMMIT_REF_SLUG"
    paths:
      - .nuget
